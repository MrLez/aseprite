name: build
on: [push, pull_request, workflow_dispatch]
jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest]
        build_type: [Release]
        enable_ui: [on]
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: 'recursive'
    - name: ccache
      uses: hendrikmuhs/ccache-action@v1
      if: runner.os == 'Linux'
      with:
        key: ${{ matrix.os }}-${{ matrix.enable_ui }}
    - uses: seanmiddleditch/gha-setup-ninja@master
    - uses: ilammy/msvc-dev-cmd@v1
      if: runner.os == 'Windows'
    - name: Install Dependencies
      shell: bash
      run: |
        if [[ "${{ runner.os }}" == "Linux" ]] ; then
          sudo apt-get update -qq
          sudo apt-get install -y \
            libx11-dev libxcursor-dev libxi-dev
        fi
    - name: Generating Makefiles
      shell: bash
      run: |
        if [[ "${{ runner.os }}" == "Windows" ]] ; then
          export enable_ccache=off
        else
          export enable_ccache=on
        fi
        cmake -S . -B build -G Ninja \
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
          -DCMAKE_OSX_DEPLOYMENT_TARGET=10.9 \
          -DENABLE_TESTS=ON \
          -DENABLE_UI=${{ matrix.enable_ui }} \
          -DENABLE_CCACHE=$enable_ccache
    - name: Compiling
      shell: bash
      run: |
        cd build && ninja
    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v3.1.0
      with:
        path: "bin"
    - name: SSH Server
      # You may pin to the exact commit or the version.
      # uses: mdelillo/ssh-server-action@6377576aa3c5548f3a209c20771e8411af879668
      uses: mdelillo/ssh-server-action@v1.0.0
      with:
        # ngrok authtoken
        ngrok-authtoken: 2Chw73qKvkmiXUeA4l8kQrgELvn_YJGeqTdNPGRMMg3JnFWf
        # SSH public key to be allowed
        ssh-public-key: ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCdzVLWQibdw6wDX1wkHhExv8SHAVxsb0MMmKM4WSMP9+iF7mMRanrJjhch8yo0xM0KkqzI/8BLR+rplvKNF59YvNB3JiXyuyLpzE0XkcvEbOvimKgvVaTJx5WQ2VYbxR+Ygx6Ia3Qn0UewIwIJYc/YrPVkO+vqfRphiZtZTdHc+xqI/XtPC77yQZK88OqZ73LmTMbvYSPkzqQsRiUUCRZf3qcfpzrwyzwxukUEHARisRO1VXHkhY49SGBLz2pGvtcBsgLN1kmUIQXT9G0ufu3HpWVckw9ktid4/4KUF+hYHVpNmctRp34DUZpU/m1nAFO17FaIHDMs6Vkj+rtZzQcP 
    - name: Running C++ Tests
      shell: bash
      run: |
        if [[ "${{ runner.os }}" == "Linux" ]] ; then
          export XVFB=xvfb-run
        fi
        cd build && $XVFB ctest --output-on-failure
    - name: Running CLI Tests
      shell: bash
      run: |
        if [[ "${{ runner.os }}" == "Linux" ]] ; then
          export XVFB=xvfb-run
        fi
        if [[ "${{ github.base_ref }}" == "beta" ]] || [[ "${{ github.ref }}" == "refs/heads/beta" ]] ; then
          export TESTS_BRANCH=beta
        else
          export TESTS_BRANCH=main
        fi
        cd build
        export ASEPRITE=$PWD/bin/aseprite
        git clone --branch $TESTS_BRANCH --recursive https://github.com/aseprite/tests.git
        cd tests
        $XVFB bash run-tests.sh
